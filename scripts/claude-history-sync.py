#!/usr/bin/env python3
"""
ClaudeCode履歴同期スクリプト v1.0
30日自動削除対策として、ClaudeCodeの会話履歴を永続保存する

実行方法:
    python claude-history-sync.py

機能:
- ClaudeCodeの会話履歴をjsonl形式でバックアップ
- Markdown形式に変換して可読性向上
- 同期ログを生成して処理状況を記録
"""

import os
import json
import datetime
import shutil
from pathlib import Path

def main():
    """メイン処理"""
    print("ClaudeCode履歴同期を開始します...")
    
    # 設定
    base_dir = Path(__file__).parent.parent.parent
    logs_dir = base_dir / "logs" / "v209" / "claude-history"
    
    # ディレクトリ作成
    (logs_dir / "native").mkdir(parents=True, exist_ok=True)
    (logs_dir / "processed").mkdir(parents=True, exist_ok=True)
    (logs_dir / "sync").mkdir(parents=True, exist_ok=True)
    
    # ClaudeCodeの履歴ディレクトリを探索
    claude_dir = Path.home() / ".claude" / "history"
    
    if not claude_dir.exists():
        print(f"警告: ClaudeCode履歴ディレクトリが見つかりません: {claude_dir}")
        # Windowsの場合の代替パス
        claude_dir = Path.home() / "AppData" / "Roaming" / "Claude" / "history"
    
    if not claude_dir.exists():
        print("ClaudeCode履歴ディレクトリが見つかりません。手動で設定してください。")
        return
    
    # 同期処理
    sync_count = sync_histories(claude_dir, logs_dir)
    
    # ログ生成
    generate_sync_log(logs_dir, sync_count)
    
    print(f"同期完了: {sync_count}ファイル処理")

def sync_histories(source_dir, dest_dir):
    """履歴ファイルを同期"""
    count = 0
    
    # jsonlファイルを検索
    for jsonl_file in source_dir.glob("**/*.jsonl"):
        try:
            # nativeディレクトリにコピー
            dest_native = dest_dir / "native" / jsonl_file.name
            if not dest_native.exists():
                shutil.copy2(jsonl_file, dest_native)
                count += 1
                
            # processedディレクトリに変換版を作成
            convert_to_markdown(jsonl_file, dest_dir / "processed")
            
        except Exception as e:
            print(f"エラー: {jsonl_file} - {e}")
    
    return count

def convert_to_markdown(jsonl_file, processed_dir):
    """JSONLファイルをMarkdown形式に変換"""
    try:
        # ファイル名生成
        base_name = jsonl_file.stem
        md_name = f"claude-session-{base_name}.md"
        md_path = processed_dir / md_name
        
        if md_path.exists():
            return
        
        # 変換処理（簡易版）
        with open(jsonl_file, 'r', encoding='utf-8') as f:
            lines = f.readlines()
        
        markdown_content = f"# Claude Session: {base_name}\n\n"
        markdown_content += f"Generated: {datetime.datetime.now().isoformat()}\n\n"
        markdown_content += f"Source: {jsonl_file.name}\n\n"
        markdown_content += "---\n\n"
        
        # JSONLの内容を処理（簡易版）
        for i, line in enumerate(lines[:10]):  # 最初の10行のみ
            try:
                data = json.loads(line.strip())
                if 'message' in data:
                    markdown_content += f"## Message {i+1}\n\n"
                    markdown_content += f"{data.get('message', '')}\n\n"
            except:
                continue
        
        # Markdownファイルを保存
        with open(md_path, 'w', encoding='utf-8') as f:
            f.write(markdown_content)
            
    except Exception as e:
        print(f"変換エラー: {jsonl_file} - {e}")

def generate_sync_log(logs_dir, sync_count):
    """同期ログを生成"""
    now = datetime.datetime.now()
    log_file = logs_dir / "sync" / f"sync-log-{now.strftime('%Y%m%d-%H%M')}.md"
    
    log_content = f"""# ClaudeCode履歴同期ログ

## 同期実行情報
- **実行日時**: {now.isoformat()}
- **緊急度**: HIGH (30日自動削除対策)
- **同期スクリプト**: claude-history-sync.py v1.0

## 処理結果
- **新規同期ファイル数**: {sync_count}
- **スクリプトステータス**: 正常終了

## ディレクトリ構造
```
{logs_dir}/
├── native/           # ClaudeCode原本バックアップ
├── processed/        # v209統一フォーマット変換済み
├── index/           # インデックス（今後実装）
└── sync/            # 同期管理情報
```

## 次回実行推奨
ClaudeCodeの30日自動削除を防ぐため、定期的な同期実行を推奨します：
- **頻度**: 週1回以上
- **監視**: 新規会話ファイルの自動検出
- **アラート**: 25日経過ファイルの警告

---
Generated by ClaudeCode History Synchronizer v209
Emergency sync completed at {now.isoformat()}
"""
    
    with open(log_file, 'w', encoding='utf-8') as f:
        f.write(log_content)
    
    print(f"同期ログ生成: {log_file}")

if __name__ == "__main__":
    main()