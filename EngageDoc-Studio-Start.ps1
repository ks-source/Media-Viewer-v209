<#\n.SYNOPSIS\n    EngageDoc-Studio v209 起動スクリプト\n    \n.DESCRIPTION\n    Node.js環境の確認、依存関係のインストール、アプリケーションの起動を行います。\n    v208からの継承機能とv209新機能（ClaudeCode履歴管理）を統合して起動します。\n    \n.PARAMETER Debug\n    デバッグモードで起動する場合に指定\n    \n.PARAMETER DevTools\n    開発者ツールを自動で開く場合に指定\n    \n.EXAMPLE\n    .\\EngageDoc-Studio-Start.ps1\n    通常モードで起動\n    \n.EXAMPLE\n    .\\EngageDoc-Studio-Start.ps1 -Debug -DevTools\n    デバッグモード、開発者ツール付きで起動\n#>\n\n[CmdletBinding()]\nparam(\n    [switch]$Debug,\n    [switch]$DevTools\n)\n\n# スクリプトの場所を基準にパスを設定\n$ScriptPath = Split-Path -Parent $MyInvocation.MyCommand.Path\n$AppPath = Join-Path $ScriptPath \"EngageDoc-Reader\"\n$LogPath = Join-Path $ScriptPath \"logs\"\n\n# ログディレクトリ作成\nif (-not (Test-Path $LogPath)) {\n    New-Item -Path $LogPath -ItemType Directory -Force | Out-Null\n}\n\n# ログファイル設定\n$LogFile = Join-Path $LogPath \"start-$(Get-Date -Format 'yyyyMMdd-HHmm').log\"\n\nfunction Write-Log {\n    param(\n        [string]$Message,\n        [string]$Level = \"INFO\"\n    )\n    \n    $Timestamp = Get-Date -Format \"yyyy-MM-dd HH:mm:ss\"\n    $LogEntry = \"[$Timestamp] [$Level] $Message\"\n    \n    Write-Host $LogEntry -ForegroundColor $(switch ($Level) {\n        \"ERROR\" { \"Red\" }\n        \"WARN\" { \"Yellow\" }\n        \"INFO\" { \"Green\" }\n        \"DEBUG\" { \"Cyan\" }\n        default { \"White\" }\n    })\n    \n    Add-Content -Path $LogFile -Value $LogEntry\n}\n\nfunction Test-NodeEnvironment {\n    Write-Log \"Node.js環境の確認中...\"\n    \n    # Node.js バージョン確認\n    try {\n        $NodeVersion = node --version 2>&1\n        if ($LASTEXITCODE -ne 0) {\n            throw \"Node.js not found\"\n        }\n        Write-Log \"Node.js version: $NodeVersion\"\n        \n        # バージョンチェック（16.x以上必要）\n        $VersionNumber = [version]($NodeVersion -replace '^v', '')\n        if ($VersionNumber -lt [version]\"16.0.0\") {\n            Write-Log \"Warning: Node.js 16.x以上が推奨されています (現在: $NodeVersion)\" \"WARN\"\n        }\n    } catch {\n        Write-Log \"Node.jsがインストールされていません。https://nodejs.org からインストールしてください。\" \"ERROR\"\n        return $false\n    }\n    \n    # npm バージョン確認\n    try {\n        $NpmVersion = npm --version 2>&1\n        Write-Log \"npm version: $NpmVersion\"\n    } catch {\n        Write-Log \"npmが利用できません。Node.jsを再インストールしてください。\" \"ERROR\"\n        return $false\n    }\n    \n    return $true\n}\n\nfunction Install-Dependencies {\n    Write-Log \"依存関係の確認・インストール中...\"\n    \n    Set-Location $AppPath\n    \n    # package.json の存在確認\n    if (-not (Test-Path \"package.json\")) {\n        Write-Log \"package.jsonが見つかりません: $AppPath\" \"ERROR\"\n        return $false\n    }\n    \n    # node_modules の確認\n    $NodeModulesExists = Test-Path \"node_modules\"\n    $PackageJsonModified = (Get-Item \"package.json\").LastWriteTime\n    \n    if (-not $NodeModulesExists) {\n        Write-Log \"node_modulesが存在しません。依存関係をインストールします...\"\n        $InstallRequired = $true\n    } else {\n        $NodeModulesModified = (Get-Item \"node_modules\").LastWriteTime\n        if ($PackageJsonModified -gt $NodeModulesModified) {\n            Write-Log \"package.jsonが更新されています。依存関係を再インストールします...\"\n            $InstallRequired = $true\n        } else {\n            Write-Log \"依存関係は最新です。\"\n            $InstallRequired = $false\n        }\n    }\n    \n    if ($InstallRequired) {\n        Write-Log \"npm install を実行中...\"\n        $InstallOutput = npm install 2>&1\n        \n        if ($LASTEXITCODE -ne 0) {\n            Write-Log \"依存関係のインストールに失敗しました:\" \"ERROR\"\n            Write-Log $InstallOutput \"ERROR\"\n            return $false\n        }\n        \n        Write-Log \"依存関係のインストールが完了しました。\"\n    }\n    \n    return $true\n}\n\nfunction Start-Application {\n    param(\n        [bool]$DebugMode,\n        [bool]$DevToolsMode\n    )\n    \n    Write-Log \"EngageDoc-Studio v209を起動中...\"\n    \n    # 環境変数設定\n    if ($DebugMode) {\n        $env:NODE_ENV = \"development\"\n        $env:ELECTRON_ENABLE_LOGGING = \"true\"\n        $env:DEBUG = \"engagedoc:*\"\n        Write-Log \"デバッグモードで起動します\" \"DEBUG\"\n    } else {\n        $env:NODE_ENV = \"production\"\n        Remove-Item Env:\\ELECTRON_ENABLE_LOGGING -ErrorAction SilentlyContinue\n        Remove-Item Env:\\DEBUG -ErrorAction SilentlyContinue\n    }\n    \n    if ($DevToolsMode) {\n        $env:OPEN_DEVTOOLS = \"true\"\n        Write-Log \"開発者ツールが有効です\" \"DEBUG\"\n    }\n    \n    # ClaudeCode履歴管理の初期化チェック\n    $ClaudeHistoryPath = Join-Path $ScriptPath \"logs\\v209\\claude-history\"\n    if (-not (Test-Path $ClaudeHistoryPath)) {\n        Write-Log \"ClaudeCode履歴管理ディレクトリを作成中...\"\n        New-Item -Path $ClaudeHistoryPath -ItemType Directory -Force | Out-Null\n        New-Item -Path \"$ClaudeHistoryPath\\native\" -ItemType Directory -Force | Out-Null\n        New-Item -Path \"$ClaudeHistoryPath\\processed\" -ItemType Directory -Force | Out-Null\n        New-Item -Path \"$ClaudeHistoryPath\\sync\" -ItemType Directory -Force | Out-Null\n    }\n    \n    # アプリケーション起動\n    try {\n        Set-Location $AppPath\n        \n        if ($DebugMode) {\n            Write-Log \"npm run dev で起動中...\"\n            npm run dev\n        } else {\n            Write-Log \"npm start で起動中...\"\n            npm start\n        }\n    } catch {\n        Write-Log \"アプリケーションの起動に失敗しました: $($_.Exception.Message)\" \"ERROR\"\n        return $false\n    }\n    \n    return $true\n}\n\nfunction Show-StartupInfo {\n    Write-Host \"\"\n    Write-Host \"===========================================\" -ForegroundColor Cyan\n    Write-Host \"    EngageDoc-Studio v209 Startup        \" -ForegroundColor Cyan\n    Write-Host \"===========================================\" -ForegroundColor Cyan\n    Write-Host \"\"\n    Write-Host \"Features:\" -ForegroundColor White\n    Write-Host \"  • Frame-based document management\" -ForegroundColor Gray\n    Write-Host \"  • D3.js zoom integration\" -ForegroundColor Gray\n    Write-Host \"  • Dual-panel control system\" -ForegroundColor Gray\n    Write-Host \"  • ClaudeCode history management\" -ForegroundColor Yellow\n    Write-Host \"  • PowerPoint export integration\" -ForegroundColor Gray\n    Write-Host \"\"\n    Write-Host \"Log file: $LogFile\" -ForegroundColor Gray\n    Write-Host \"\"\n}\n\n# メイン実行\ntry {\n    Show-StartupInfo\n    \n    # Node.js環境チェック\n    if (-not (Test-NodeEnvironment)) {\n        Write-Log \"環境チェックに失敗しました。\" \"ERROR\"\n        exit 1\n    }\n    \n    # 依存関係インストール\n    if (-not (Install-Dependencies)) {\n        Write-Log \"依存関係のセットアップに失敗しました。\" \"ERROR\"\n        exit 1\n    }\n    \n    # アプリケーション起動\n    if (-not (Start-Application -DebugMode $Debug -DevToolsMode $DevTools)) {\n        Write-Log \"アプリケーションの起動に失敗しました。\" \"ERROR\"\n        exit 1\n    }\n    \n    Write-Log \"EngageDoc-Studio が正常に起動しました。\"\n    \n} catch {\n    Write-Log \"予期しないエラーが発生しました: $($_.Exception.Message)\" \"ERROR\"\n    Write-Log \"スタックトレース: $($_.ScriptStackTrace)\" \"ERROR\"\n    exit 1\n} finally {\n    # 環境変数のクリーンアップ\n    Remove-Item Env:\\NODE_ENV -ErrorAction SilentlyContinue\n    Remove-Item Env:\\ELECTRON_ENABLE_LOGGING -ErrorAction SilentlyContinue\n    Remove-Item Env:\\DEBUG -ErrorAction SilentlyContinue\n    Remove-Item Env:\\OPEN_DEVTOOLS -ErrorAction SilentlyContinue\n}